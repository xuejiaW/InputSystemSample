//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/BallControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BallControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BallControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BallControls"",
    ""maps"": [
        {
            ""name"": ""BallPlayer"",
            ""id"": ""d61a52ed-ce8a-43a4-8c35-4a6344270275"",
            ""actions"": [
                {
                    ""name"": ""Button"",
                    ""type"": ""Button"",
                    ""id"": ""01fbf467-909a-4fd3-bb83-1b74955b60fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5e1e85b2-6871-48d3-9e18-bb5e860de051"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38616d73-4af6-4d0d-a052-d9cfe5337688"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ff20e2-8154-4162-b14f-d9b3af0ecaa6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c9e1fc2-064d-4f23-962b-17f1c9db04e0"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1328a30c-b01c-41ee-a0a0-6c160cf8f7c3"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3c32028-45b4-4e59-9699-adf285b00c1d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""3cf79600-a1ef-4460-83a8-69a182b6a184"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9cf43e6f-0fff-4592-b034-291d20e448c1"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36f0a228-24e1-4b61-8cea-8a03e41557a9"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""98ad021b-5599-4038-aa0d-e3c62150f85c"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3c75977d-45b5-4c37-8a3c-07da355f08e7"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BallPlayer
        m_BallPlayer = asset.FindActionMap("BallPlayer", throwIfNotFound: true);
        m_BallPlayer_Button = m_BallPlayer.FindAction("Button", throwIfNotFound: true);
        m_BallPlayer_Move = m_BallPlayer.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BallPlayer
    private readonly InputActionMap m_BallPlayer;
    private List<IBallPlayerActions> m_BallPlayerActionsCallbackInterfaces = new List<IBallPlayerActions>();
    private readonly InputAction m_BallPlayer_Button;
    private readonly InputAction m_BallPlayer_Move;
    public struct BallPlayerActions
    {
        private @BallControls m_Wrapper;
        public BallPlayerActions(@BallControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button => m_Wrapper.m_BallPlayer_Button;
        public InputAction @Move => m_Wrapper.m_BallPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_BallPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IBallPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_BallPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallPlayerActionsCallbackInterfaces.Add(instance);
            @Button.started += instance.OnButton;
            @Button.performed += instance.OnButton;
            @Button.canceled += instance.OnButton;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IBallPlayerActions instance)
        {
            @Button.started -= instance.OnButton;
            @Button.performed -= instance.OnButton;
            @Button.canceled -= instance.OnButton;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IBallPlayerActions instance)
        {
            if (m_Wrapper.m_BallPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_BallPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallPlayerActions @BallPlayer => new BallPlayerActions(this);
    public interface IBallPlayerActions
    {
        void OnButton(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
